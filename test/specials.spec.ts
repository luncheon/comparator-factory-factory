import comparatorFactoryFactory from './'

describe('specials', () => {
  test('default', () => {
    const comparator = comparatorFactoryFactory()()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })

  test('default reversed', () => {
    const comparator = comparatorFactoryFactory()().reversed()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('null first', () => {
    const comparator = comparatorFactoryFactory({ specials: [[null, 'first']] })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })

  test('null first reversed', () => {
    const comparator = comparatorFactoryFactory({ specials: [[null, 'first']] })().reversed()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('NaN first null first', () => {
    const comparator = comparatorFactoryFactory({ specials: [[NaN, 'first'], [null, 'first']] })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('NaN first null first reversed', () => {
    const comparator = comparatorFactoryFactory({ specials: [[NaN, 'first'], [null, 'first']] })().reversed()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })

  test('null last', () => {
    const comparator = comparatorFactoryFactory({ specials: [[null, 'last']] })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('null last reversed', () => {
    const comparator = comparatorFactoryFactory({ specials: [[null, 'last']] })().reversed()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })
})
