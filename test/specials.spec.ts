import comparing from './comparing'

describe('specials', () => {
  test('default', () => {
    const comparator = comparing()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })

  test('default desc', () => {
    const comparator = comparing.rule({ desc: true })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('null first', () => {
    const comparator = comparing.rule({ specials: [[null, 'first']] })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })

  test('null first desc', () => {
    const comparator = comparing.rule({ specials: [[null, 'first']], desc: true })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })

  test('NaN first null first', () => {
    const comparator = comparing.rule({ specials: [[NaN, 'first'], [null, 'first']] })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('NaN first null first desc', () => {
    const comparator = comparing.rule({ specials: [[NaN, 'first'], [null, 'first']], desc: true })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('null last', () => {
    const comparator = comparing.rule({ specials: [[null, 'last']] })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('null last desc', () => {
    const comparator = comparing.rule({ specials: [[null, 'last']], desc: true })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('null min', () => {
    const comparator = comparing.rule({ specials: [[null, 'min']] })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })

  test('min desc', () => {
    const comparator = comparing.rule({ specials: [[null, 'min']], desc: true })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('null max', () => {
    const comparator = comparing.rule({ specials: [[null, 'max']] })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(-1)
    expect(comparator('', undefined)).toBe(1)
    expect(comparator(null, '')).toBe(1)
    expect(comparator('', null)).toBe(-1)
    expect(comparator(NaN, '')).toBe(-1)
    expect(comparator('', NaN)).toBe(1)
    expect(comparator(undefined, null)).toBe(-1)
    expect(comparator(null, undefined)).toBe(1)
    expect(comparator(undefined, NaN)).toBe(-1)
    expect(comparator(NaN, undefined)).toBe(1)
    expect(comparator(null, NaN)).toBe(1)
    expect(comparator(NaN, null)).toBe(-1)
  })

  test('null max desc', () => {
    const comparator = comparing.rule({ specials: [[null, 'max']], desc: true })()
    expect(comparator(undefined, undefined)).toBe(0)
    expect(comparator(null, null)).toBe(0)
    expect(comparator(NaN, NaN)).toBe(0)
    expect(comparator(undefined, '')).toBe(1)
    expect(comparator('', undefined)).toBe(-1)
    expect(comparator(null, '')).toBe(-1)
    expect(comparator('', null)).toBe(1)
    expect(comparator(NaN, '')).toBe(1)
    expect(comparator('', NaN)).toBe(-1)
    expect(comparator(undefined, null)).toBe(1)
    expect(comparator(null, undefined)).toBe(-1)
    expect(comparator(undefined, NaN)).toBe(1)
    expect(comparator(NaN, undefined)).toBe(-1)
    expect(comparator(null, NaN)).toBe(-1)
    expect(comparator(NaN, null)).toBe(1)
  })
})
